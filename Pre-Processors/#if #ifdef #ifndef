1. The #if directive is a preprocessor directive that tests if a certain condition is true or false, and enables or disables code accordingly.

Here's an example of how to use the #if directive:
-----------------------------------------------------
#if defined(_WIN32)
    #define OS_NAME "Windows"
#else
    #define OS_NAME "Other"
#endif
-----------------------------------------------------
This code checks if the preprocessor macro _WIN32 is defined, which is used to identify the Windows operating system.
If it is defined, it defines a macro called OS_NAME with the value "Windows", otherwise it defines the macro with the value "Other".





2. The #ifdef directive is a preprocessor directive that tests if a certain macro is defined, and enables or disables code accordingly.


Here's an example of how to use the #ifdef directive:
-----------------------------------------------------
#ifdef DEBUG
    printf("Debugging information:\n");
#endif
-----------------------------------------------------
This code checks if the preprocessor macro DEBUG is defined, and if it is, it prints out a debugging message.
This can be used to enable or disable debugging information in the program depending on whether the DEBUG macro is defined.




3. The #ifndef directive is a preprocessor directive that tests if a certain macro is not defined, and enables or disables code accordingly.

Here's an example of how to use the #ifndef directive:
-----------------------------------------------------------------
#ifndef MY_HEADER_FILE_H
#define MY_HEADER_FILE_H

/* Header file contents go here */

#endif
-----------------------------------------------------------------
This code checks if the macro MY_HEADER_FILE_H is not defined, and if it is not, it defines the macro and includes the contents of the header file.
This is a common idiom used to prevent a header file from being included multiple times in the same program.

In summary, the #if, #ifdef, and #ifndef preprocessor directives are powerful tools for enabling or disabling code based on certain conditions,
and for ensuring that header files are included only once in a program.
They are commonly used in C and C++ programming to control program behavior and provide flexibility and modularity in code.
