In C#, the yield keyword is used in conjunction with iterator blocks to create a sequence of values that can be enumerated. 
An iterator block is a method that uses the yield keyword to return a sequence of values, one at a time, without needing to compute the entire sequence up front.

An example of an iterator block that returns a sequence of integers:
------------------------------------------------------------------------------------

public static IEnumerable<int> GetNumbers()
{
    yield return 1;
    yield return 2;
    yield return 3;
    yield return 4;
    yield return 5;
}

------------------------------------------------------------------------------------

This method returns an IEnumerable<int>, which is an interface that allows the caller to enumerate the sequence of integers returned by the method.
The yield keyword is used to return each integer in the sequence one at a time.
When the caller enumerates the sequence, the method is executed up to the point of the first yield statement, which returns the first integer in the sequence.
The method then waits for the caller to request the next integer, at which point it resumes execution and returns the next integer in the sequence.

The yield keyword can be used in a variety of ways to create different kinds of sequences.
For example, you can use the yield keyword in a loop to generate a sequence of numbers, or you can use it to create a sequence from an existing collection of objects.
You can also use the yield break statement to signal the end of the sequence and exit the method.


Here are the two yield statements in C#:

* yield return expression;
* yield break; 

The yield return statement is used inside an iterator method to return a value from the iterator and continue the iteration.
The yield break statement is used to end the iteration early and exit the iterator method.


It's important to note that iterator blocks are a powerful feature of C#, but they can also be somewhat complex to use correctly. 



