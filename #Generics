Generics: 

Generics in C# allow you to write code that can work with multiple types, rather than being tied to a specific type.
This can make your code more flexible and reusable.

Here's an example of a simple generic class:

------------------------------------------------------------------------------------------------------------------------------------------------------------------
public class MyGenericClass<T>
{
  private T_value;
  
  public MyGenericClass(T value)
  {
    _value = value;
  }
  
  public T GetValue()
  {
    return _value;
  }
  
  public void SetValue(T value)
  {
    _value = value;
  }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------

In this example, the class "MyGenericClass" has a generic type parameter "T", which is used to define the type of the private field "_value".
The class has a constructor that takes an argument of type "T", and two methods "GetValue" and "SetValue" that also use "T".

You can create an instance of this class for any type you want.
------------------------------------------------------------------------------------------------------------------------------------------------------------------

MyGenericClass<int> my IntObject = new MyGenericClass<int>(5);          // We set the "IntObject" generic type variable to an integer and assigned it to a value of 5.
int myInt = myIntObject.GetValue(); // myInt will be 5                  // GetValue() method is called and the value of the variable "myInt" is equal to 5.

MyGenericClass<string> myStringOBject = new MyGenericClass<string>("Welcome to the reality!");
// We set the "myStringOBject" generic type variable to an string and assigned it to a value of "Welcome to the Reality!".
string myString = myStringObject.GetValue(); // "myString" pure string variable is now equal to with called method myStringObject's value.
------------------------------------------------------------------------------------------------------------------------------------------------------------------

You can also use generic methods, which are methods that have a generic type parameter.
For example: 
------------------------------------------------------------------------------------------------------------------------------------------------------------------
public static void Swap<T>(ref T a, ref T b)
{
  T temp = a;
  a = b;
  b = temp;
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------
This method takes two arguments of the same type, and swaps their values. You can call it with any type:
------------------------------------------------------------------------------------------------------------------------------------------------------------------
int x = 5;
int y = 10;
Swap(ref x, refy); // x is now 10, y is now 5
------------------------------------------------------------------------------------------------------------------------------------------------------------------
You can also use consstraints on the generic type parameter.
For example, you can specify that the type must implement a certain interface or inherit from a certain class:
------------------------------------------------------------------------------------------------------------------------------------------------------------------
public class MyConstrainedGenericClass<T> where T : IMyInterface
{
  // class implementation
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------
This limits the types that can be used as the generic type parameter for this class to those that implement the IMyInterface interface.

There are more advanced usage of Generic like IEnumerable, ICollection and IList which are commonly used interfaces that allow you to work with collections of items
in a type-safe way. You can also use the generic List<T> class, which is a built-in collection class that implements these interfaces.

Another example is Generic Constraints:
In some cases, you may want to impose certain constraints on the type parameter of a generic class or method.
For example, you may want to ensure that the type parameter implements a certain interface or is derived from a certain class.
You can do this using generic constraints. For example, here is a simple generic class called "MyCompare" that has a type parameter T,
and it's constrained to be only of type which is class and must implement IComparable interface, this way it can be used for comparison purpose:
------------------------------------------------------------------------------------------------------------------------------------------------------------------
class MyCompare<T> where T: class, IComparable
{
    public bool IsGreater(T a, T b)
    {
        return a.CompareTo(b) > 0;
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------
You can create an object of the class and use IsGreater method on it, for example:
------------------------------------------------------------------------------------------------------------------------------------------------------------------
MyCompare<int> compareInt = new MyCompare<int>();
bool isGreater = compareInt.IsGreater(1,2);
Console.WriteLine(isGreater);
//This will output: False
------------------------------------------------------------------------------------------------------------------------------------------------------------------
These are the basic concepts and examples of how to use generics in C#. With Generics, you can make your code more flexible, reusable, and type-safe.
You can also use them to constrain the types of variables that can be used with your classes and methods, which can help you to prevent errors and improve performance.
------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------



Generic Class Example;
------------------------------------------------------------------------------------------------------------------------------------------------------------------
namespace ReverseA
{
    class SimpleList<T>
    {
      private List<T> items = new List<T>();

      public void Add(T item)
      {
        items.Add(item);
      }

      public T this[int index]
      {
        get {return items[index];
      }

    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------
1. The class is declared as a generic class, with the type parameter T in angle brackets <T>. This means that the class can work with any type, as long as the type
   is specified when creating an instance of the class.
2. Inside the class, a private field items of type List<T> is declared. This field will be used to store the items of the list. The List<T> class is part of the C#
   standard library and provides a dynamic list of items of a specified type.
3. The Add mnethod is declared, which takes a single parameter of type T. This method simply adds the passed item to the items list by calling the Add method on the
   items list.
4. The this indexer property is declared, which allows items to be accessed by index. The property has a get accessor that returns the item at the specified index
   from the items list.
5. The class does not have a constructor, so the items field is initalized with a new instance of List<T> when the class is instantiated.
6. When you create an instance of the class and specify the type, the class is ready to use. You can add items to the list using the Add method and access them 
   using the indexer property, like this:
   ------------------------------------------------------------------------------------------------------------------------------------------------------------------
   SimpelList<int> intList = new SimpleList<int>();
   intList.Add(1);
   Console.WriteLine(intList[0]); //Output: 1
------------------------------------------------------------------------------------------------------------------------------------------------------------------
7. You can also use other types like custom class.
------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Person
{
  public string Name {get;set;}
  public int Age {get;set;}
}

SimpleList<Person> personList = new SimpleList<Person>();
personList.Add(new Person{Name = "Jake", Age = 30});
Console.WriteLine(personList[0].Name);  //Output: "John"
------------------------------------------------------------------------------------------------------------------------------------------------------------------
In summary, The SimpleList class ia generic class that can be used to store items of any type, as long as the type is specified when creating an instance of the
class. The Add method is used to add items to the list, and the indexer property is used to access the items by index.
------------------------------------------------------------------------------------------------------------------------------------------------------------------

Generic Method Examples;

Example 1 : A generic method that swaps the values of two variables:
------------------------------------------------------------------------------------------------------------------------------------------------------------------
class GenericMethods
{
    static void Swap<T>(ref T a, ref T b)
    {
        T temp = a;
        a = b;
        b = temp;
    }
    static void Main()
    {
        int x = 1, y = 2;
        Console.WriteLine("Before swap: x = {0}, y = {1}", x, y);
        Swap<int>(ref x, ref y);
        Console.WriteLine("After swap: x = {0}, y = {1}", x, y);
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------
1. The code defines a class named "GenericMethods"
2. Inside "GenericMethods" class, a generic method named "Swap" is defined. This method takes two parameters of the sampe type "T" and swaps their values using a
   temporary variable. The ref keyword is used to pass the variables by reference, so that the changes made in the method will be reflected in the calling mode.
3. Inside the "GenericMethods" class, the Main method is defined. The Main method is the entry point of the program and is where the execution of the program begins.
4. In the Main method, two variables x and y are declared and initialized with the values 1 and 2 respectively.
5. The first Console. WriteLine statement is used to print the values of x and y before the swap. The output will be "Before swap: x=1, y=2"
6. The Swap method is called, passing x and y as arguments by refence. The type of the variables, in, is passed as a type argument to the swap method.
7. Inside the swap method, the values of "x" and "y" are swapped. The value of x is assigned to a tempoprary variable temp, then the value of "y" is assigned to "x",
   finaly the value of temp is assigned to "y".
8. The second "Console.WriteLine" statement is used to print the values of "x" and "y" after the swap. The output will be "After swap: x = 2, y =1"


   This is an example of how you can use a generic method to swap two variables fo any type. The Swap method is defined with a type parameter T and can be used to
   swap variables of any type that can be assigned to the type parameter.
------------------------------------------------------------------------------------------------------------------------------------------------------------------
    
Example 2: A generic method that finds the minimum value is an array of any type that implements the "IComparable" interface:
------------------------------------------------------------------------------------------------------------------------------------------------------------------
using System;

static T Min<T>(T[] array) where T : IComparable
{
    T min = array[0];

    for (int i = 1; i < array.Length; i++)
    {
        if (min.CompareTo(array[i]) > 0)
        {
            min = array[i];
        }
    }
    return min;
}


static void Main()
{
    int[] intArray = { 3, 2, 1 };
    Console.WriteLine("Minmum value in intArray: {0}", Min<int>(intArray)); // Output: 1

    double[] doubleArray = { 1.2, 3.4, 2.1 };
    Console.WriteLine("Minimum value is doubleArray: {0}", Min<double>(doubleArray));
    // Output: 1.2

    string[] stringArray = { "abc", "def", "ghi" };
    Console.WriteLine("Minimum value is stringArray: {0}", Min<string>(stringArray));// Output :abc"
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------
Explanation :

1. "static T Min<T>(T[] array) where T : IComparable" - This is the defination of a generic method named "Min". It takes in a single parameter, an array of type "T",
   where "T" is a generic type parameter. The "where T : IComparable" constraint specifies that any type used as "T" must implement the "IComparable" interface,
   which defines a "CompareTo" method used to compare objects.
2. "T min = array[0];" - Inside the method, a variable "min" of type "T" is declared and initialized to the first element of the input array.
3. "for (int i = 1; i < array.LEngth; i++)" - A for loop is used to iterate through the array starting from the second element (index 1).
4. "if (min.ComperatTo(array[i]) > 0) " - Inside the for loop, the "CompareTo" method is called on the "min" variable, passing in the current element of the array 
   ("array[i]"). If the result of this comparison is greater than 0, it means that the current element of the array is smaller than the current value of "min",
   so the current element is assigned to "min".
5. "return min;" - After the for loop completes, the method returns the final value of "min", which is the smallest element of the input array.
6. "int[] intArray = {3,2,1};" - An integer array is declared and intialized with the value 3,2, and 1.
7. "Console.WriteLine("Minimum value in intArray: {0}", Min<int>(intArray));" - The "Min" method is called, passing in the "intArray" as the input. The result of this
   call is the minimum value in the array, which is 1. This passed to the "Console.WriteLine" method to display the result on the console.
8. The same process is repeated for double and string arrays.
------------------------------------------------------------------------------------------------------------------------------------------------------------------

###
An example of a generic method that can reverse the elements of an array:
------------------------------------------------------------------------------------------------------------------------------------------------------------------

static T[] Reverse<T>(T[] array)
{
    int length = array.Length;
    T[] reversedArray = new T[length};
    
    for(int i = 0; i < length; i++)
    {
        reversedArray[i] = array[length - 1 - i];
    }
    return reversedArray;
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------
This method reverse the elements of any array regardless of the type of elements the array contains. For example:
------------------------------------------------------------------------------------------------------------------------------------------------------------------
int[] intArray = { 1, 2, 3 };
int[] reversedIntArray = Reverse(intArray);
foreach (int i in reversedIntArray)
    Console.Write(i + " "); // Output: "3 2 1 "

string[] stringArray = { "a", "b", "c" };
string[] reversedStringArray = Reverse(stringArray);
foreach (string s in reversedStringArray)
    Console.Write(s + " "); // Output: "c b a "
------------------------------------------------------------------------------------------------------------------------------------------------------------------

Comprehensively explaination: 
1. "static T[] Reverse<T>(T[] array)" - This is the definition of a generic method named Reverse. It takes in a single parameter, an array of type "T",
   where "T" is a generic type parameter. The method returns an array of the same type.
   
2. int length = array.Length; - Inside the method, a variable length is declared and initialized to the length of the input array.

3. T[] reversedArray = new T[length]; - A new array of type T named reversedArray is created with the same length as the input array.

4. for (int i = 0; i < length; i++) - A for loop is used to iterate through the array.

5. reversedArray[i] = array[length - 1 - i]; - Inside the for loop, the element of the input array at index length - 1 - i is assigned to the corresponding element
   in the reversedArray at index i. This effectively reverses the order of the elements in the array.

6. return reversedArray; - After the for loop completes, the method returns the reversed array.

7. int[] intArray = { 1, 2, 3 }; - An integer array is declared and initialized with the values 1, 2, and 3.

8. int[] reversedIntArray = Reverse(intArray); - The Reverse method is called, passing in the intArray as the input.
   The result of this call is a new array with the elements in reverse order.

9. foreach (int i in reversedIntArray) - A foreach loop is used to iterate through the reversedIntArray.

10. Console.Write(i + " "); - Inside the foreach loop, the current element of the array is written to the console, followed by a space.
   This will display "3 2 1 " on the console.

11. The same process is repeated for string array.

------------------------------------------------------------------------------------------------------------------------------------------------------------------

An example of a generic method that can find the index of a specific element in an array:
------------------------------------------------------------------------------------------------------------------------------------------------------------------
static int FindIndex<T>(T[] array, T value) where T : IEquatable<T>
{
    for (int i = 0; i < array.Length; i++)
    {
        if (array[i].Equals(value))
        {
            return i;
        }
    }
    return -1;
}

int[] intArray = { 1, 2, 3 };
int index = FindIndex(intArray, 2);
Console.WriteLine(index); // Output: 1

string[] stringArray = { "a", "b", "c" };
index = FindIndex(stringArray, "b");
Console.WriteLine(index); // Output: 1
------------------------------------------------------------------------------------------------------------------------------------------------------------------

Comprehensively explaination: 

1. "static int FindIndex<T>( T[] array, T value) where T : IEquatable <T>" - This is the definition of a generic method named "FindIndex". It takes in two parameters,
   an aray of type "T" and a value of type "T". The method returns an integer. The "where T : Iequatable<T>" constraint specifies that any type used as "T" must
   implement the "IEquatable<T>" interface, which defines an "Equals" method use to compare objects.
2. "for (int i = 0; i < array.Length; i++) - A for loop is used to iterate through the array.
3. "if (array[i].Equals(value))" - Inside the for loop, the Equals method is called on the current element of the array, passing in the value as an argument.
4. "return i;" - If the "Equals" method returns true, indicating that the current element of the array is equal to the value, the method returns the current index.
5. "return -1;" - If the for loop completes without returning, it means that the value was not found in the array and the method returns -1.
6. "int[] intArray = { 1, 2, 3 };" - An integer array is declared and initialized with the values 1, 2, and 3.
7. "int index = FindIndex(intArray, 2);" - The "FindIndex" method is called, passing in the intArray and the value 2 as arguments.
   The result of this call is the index of the value 2 in the array, which is 1.
------------------------------------------------------------------------------------------------------------------------------------------------------------------
#####
An example of a generic method that can check if an array contains a specific element:
------------------------------------------------------------------------------------------------------------------------------------------------------------------
static bool Contains<T> T[] array, T value) where T : IEquatable<T>
{
  for(int i = 0; i < array.Length; i++)
  {
    if(array[i].Equals(value))
    {
        return true;
    }
  }
  return false;
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------
You can use this method to check if an array contains a specific element, regardless of the type of elements the array contains, as long as the type implements the
"IEquatable<T>" interface, which is required by the method to work. For example:
------------------------------------------------------------------------------------------------------------------------------------------------------------------
int[] intArray = {1,2,3};
bool isContain = Contains(intArray, 2);
Console.WriteLine(isContain); // Output: true

string[] stringArray = { "a", "b", "c" };
isContain = Contains(stringArray, "b");
Console.WriteLine(isContain); // Output: true
------------------------------------------------------------------------------------------------------------------------------------------------------------------
As you can see this method has a constraint on the tpye T "where T : IEquatable<T>" this constraint is required to use the "Equals" method of the element, so the 
method can compare the element and check if it exist in the array or not.
------------------------------------------------------------------------------------------------------------------------------------------------------------------
int[] intArray = {1,2,3};
bool isContain = Contains(intArray, 5); // intArray does not contain the value "5" so it will be false
Console.WriteLine(isContain); // Output: false
------------------------------------------------------------------------------------------------------------------------------------------------------------------

